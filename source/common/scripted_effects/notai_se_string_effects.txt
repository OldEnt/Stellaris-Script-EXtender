
 #####						 #####
##### Script Extender Strings #####
 #####						 #####
 # All string effects should be assumed to take 3 calls on the effect stack
 # Strings are used for dynamically creating and modifying names
 # Strings are used for retrieving user inputted data and using said data on your game

 #####						  #####
##### Universal String Effects #####
 #####						  #####
 # Used in all types of strings for their specific reasons, note that performance may differ depending on the list type being operated on

### Returns the full string value
### Parameters
# identifier				- A unique identifier for the given string
# bound_to(optional) 		- The scope that the associated string is stored to
# return_target(optional) 	- The scope to return the string as, will return in the name property, default value is this
# destroy_string(optional) 	- If yes destroys the string after returning the value, default value is no
# param_one(optional) 		- The first parameter scope in a parameterized string
# param_two(optional)		- The second parameter scope in a parameterized string
# param_three(optional)		- The third parameter scope in a parameterized string
# param_four(optional)		- The fourth parameter scope in a parameterized string
# param_five(optional)		- The fifth parameter scope in a parameterized string
# param_six(optional) 		- The sixth parameter scope in a parameterized string
# param_seventh(optional)	- The seventh parameter scope in a parameterized string
# param_eight(optional)		- The eighth parameter scope in a parameterized string
# param_nine(optional)		- The ninth parameter scope in a parameterized string
# param_ten(optional)		- The tenth parameter scope in a parameterized string
# param_list(optional)		- An identifier for a list in the same scope to draw parameters for (disables above param_one through param_ten)
se_return_string = {
	save_global_event_target_as = se_hidden_return_scope
	[[return_target]
	clear_global_event_target = se_hidden_return_scope
	if = {
		limit = { is_scope_set = $return_target$ }
		$return_target$ = { save_global_event_target_as = se_hidden_return_scope }
	}
	else_if = {
		limit = { is_scope_set = event_target:$return_target$ }
		event_target:$return_target$ = { save_global_event_target_as = se_hidden_return_scope }
	}
	else = {
		log_error = "se_return_string: Invalid scope reference passed by argument: return_target."
		break = yes
	}
	]
	event_target:se_hidden_return_scope = {
		if = {
			limit = { se_scope_can_be_named = yes }
			set_name = ""
		}
		else = {
			log_error = "se_return_string: Scope return_target cannot be renamed as it does not support an implementation of the set_name effect."
			break = yes
		}
	}
	[[param_list]
	if = {
		limit = { always = no }
	]
	[[param_one]
	if = {
		limit = { is_scope_set = $param_one$ }
		$param_one$ = { save_global_event_target_as = se_hidden_string_param }
	}
	else_if = {
		limit = { is_scope_set = event_target:$param_one$ }
		event_target:$param_one$ = { save_global_event_target_as = se_hidden_string_param }
	}
	else = {
		log_error = "se_return_string: Invalid scope reference passed by argument: param_one"
		break = yes
	}
	owner = {
		se_create_list = {
			identifier = se_param_list
			overwrite = yes
		}
	}
	event_target:se_hidden_string_param = {
		if = {
			limit = { NOT = { se_scope_can_be_named = yes } }
			log_error = "se_return_string: Scope param_one cannot be renamed as it does not support an implementation of the set_name effect."
			break = yes
		}
		prev.owner = {
			se_create_database_entry = {
				identifier = se_temp_param_one
				overwrite = yes
			}

		}
		event_target:se_return_value = {
			set_name = \\[Prev.GetName]
			se_add_entry_to_list = { identifier = se_param_list }
		}
	}
	clear_global_event_target = se_hidden_string_param
	se_clear_return_value = yes
	]
	[[param_two]
	if = {
		limit = { is_scope_set = $param_two$ }
		$param_two$ = { save_global_event_target_as = se_hidden_string_param }
	}
	else_if = {
		limit = { is_scope_set = event_target:$param_two$ }
		event_target:$param_two$ = { save_global_event_target_as = se_hidden_string_param }
	}
	else = {
		log_error = "se_return_string: Invalid scope reference passed by argument: param_two"
		break = yes
	}
	event_target:se_hidden_string_param = {
		if = {
			limit = { NOT = { se_scope_can_be_named = yes } }
			log_error = "se_return_string: Scope param_two cannot be renamed as it does not support an implementation of the set_name effect."
			break = yes
		}
		prev.owner = {
			se_create_database_entry = {
				identifier = se_temp_param_two
				overwrite = yes
			}
		}
		event_target:se_return_value = {
			set_name = \\[Prev.GetName]
			se_add_entry_to_list = { identifier = se_param_list }
		}
	}
	clear_global_event_target = se_hidden_string_param
	se_clear_return_value = yes
	]
	[[param_three]
	if = {
		limit = { is_scope_set = $param_three$ }
		$param_three$ = { save_global_event_target_as = se_hidden_string_param }
	}
	else_if = {
		limit = { is_scope_set = event_target:$param_three$ }
		event_target:$param_three$ = { save_global_event_target_as = se_hidden_string_param }
	}
	else = {
		log_error = "se_return_string: Invalid scope reference passed by argument: param_three"
		break = yes
	}
	event_target:se_hidden_string_param = {
		if = {
			limit = { NOT = { se_scope_can_be_named = yes } }
			log_error = "se_return_string: Scope param_three cannot be renamed as it does not support an implementation of the set_name effect."
			break = yes
		}
		prev.owner = {
			se_create_database_entry = {
				identifier = se_temp_param_three
				overwrite = yes
			}
		}
		event_target:se_return_value = {
			set_name = \\[Prev.GetName]
			se_add_entry_to_list = { identifier = se_param_list }
		}
	}
	clear_global_event_target = se_hidden_string_param
	se_clear_return_value = yes
	]
	[[param_four]
	if = {
		limit = { is_scope_set = $param_four$ }
		$param_four$ = { save_global_event_target_as = se_hidden_string_param }
	}
	else_if = {
		limit = { is_scope_set = event_target:$param_four$ }
		event_target:$param_four$ = { save_global_event_target_as = se_hidden_string_param }
	}
	else = {
		log_error = "se_return_string: Invalid scope reference passed by argument: param_four"
		break = yes
	}
	event_target:se_hidden_string_param = {
		if = {
			limit = { NOT = { se_scope_can_be_named = yes } }
			log_error = "se_return_string: Scope param_four cannot be renamed as it does not support an implementation of the set_name effect."
			break = yes
		}
		prev.owner = {
			se_create_database_entry = {
				identifier = se_temp_param_four
				overwrite = yes
			}
		}
		event_target:se_return_value = {
			set_name = \\[Prev.GetName]
			se_add_entry_to_list = { identifier = se_param_list }
		}
	}
	clear_global_event_target = se_hidden_string_param
	se_clear_return_value = yes
	]
	[[param_five]
	if = {
		limit = { is_scope_set = $param_five$ }
		$param_five$ = { save_global_event_target_as = se_hidden_string_param }
	}
	else_if = {
		limit = { is_scope_set = event_target:$param_five$ }
		event_target:$param_five$ = { save_global_event_target_as = se_hidden_string_param }
	}
	else = {
		log_error = "se_return_string: Invalid scope reference passed by argument: param_five"
		break = yes
	}
	event_target:se_hidden_string_param = {
		if = {
			limit = { NOT = { se_scope_can_be_named = yes } }
			log_error = "se_return_string: Scope param_five cannot be renamed as it does not support an implementation of the set_name effect."
			break = yes
		}
		prev.owner = {
			se_create_database_entry = {
				identifier = se_temp_param_five
				overwrite = yes
			}
		}
		event_target:se_return_value = {
			set_name = \\[Prev.GetName]
			se_add_entry_to_list = { identifier = se_param_list }
		}
	}
	clear_global_event_target = se_hidden_string_param
	se_clear_return_value = yes
	]
	[[param_six]
	if = {
		limit = { is_scope_set = $param_six$ }
		$param_six$ = { save_global_event_target_as = se_hidden_string_param }
	}
	else_if = {
		limit = { is_scope_set = event_target:$param_six$ }
		event_target:$param_six$ = { save_global_event_target_as = se_hidden_string_param }
	}
	else = {
		log_error = "se_return_string: Invalid scope reference passed by argument: param_six"
		break = yes
	}
	event_target:se_hidden_string_param = {
		if = {
			limit = { NOT = { se_scope_can_be_named = yes } }
			log_error = "se_return_string: Scope param_six cannot be renamed as it does not support an implementation of the set_name effect."
			break = yes
		}
		prev.owner = {
			se_create_database_entry = {
				identifier = se_temp_param_six
				overwrite = yes
			}
		}
		event_target:se_return_value = {
			set_name = \\[Prev.GetName]
			se_add_entry_to_list = { identifier = se_param_list }
		}
	}
	clear_global_event_target = se_hidden_string_param
	se_clear_return_value = yes
	]
	[[param_seven]
	if = {
		limit = { is_scope_set = $param_seven$ }
		$param_seven$ = { save_global_event_target_as = se_hidden_string_param }
	}
	else_if = {
		limit = { is_scope_set = event_target:$param_seven$ }
		event_target:$param_seven$ = { save_global_event_target_as = se_hidden_string_param }
	}
	else = {
		log_error = "se_return_string: Invalid scope reference passed by argument: param_seven"
		break = yes
	}
	event_target:se_hidden_string_param = {
		if = {
			limit = { NOT = { se_scope_can_be_named = yes } }
			log_error = "se_return_string: Scope param_seven cannot be renamed as it does not support an implementation of the set_name effect."
			break = yes
		}
		prev.owner = {
			se_create_database_entry = {
				identifier = se_temp_param_seven
				overwrite = yes
			}
		}
		event_target:se_return_value = {
			set_name = \\[Prev.GetName]
			se_add_entry_to_list = { identifier = se_param_list }
		}
	}
	clear_global_event_target = se_hidden_string_param
	se_clear_return_value = yes
	]
	[[param_eight]
	if = {
		limit = { is_scope_set = $param_eight$ }
		$param_eight$ = { save_global_event_target_as = se_hidden_string_param }
	}
	else_if = {
		limit = { is_scope_set = event_target:$param_eight$ }
		event_target:$param_eight$ = { save_global_event_target_as = se_hidden_string_param }
	}
	else = {
		log_error = "se_return_string: Invalid scope reference passed by argument: param_eight"
		break = yes
	}
	event_target:se_hidden_string_param = {
		if = {
			limit = { NOT = { se_scope_can_be_named = yes } }
			log_error = "se_return_string: Scope param_eight cannot be renamed as it does not support an implementation of the set_name effect."
			break = yes
		}
		prev.owner = {
			se_create_database_entry = {
				identifier = se_temp_param_eight
				overwrite = yes
			}
		}
		event_target:se_return_value = {
			#set_name = \\[Prev.GetName]
			se_add_entry_to_list = { identifier = se_param_list }
		}
	}
	clear_global_event_target = se_hidden_string_param
	se_clear_return_value = yes
	]
	[[param_nine]
	if = {
		limit = { is_scope_set = $param_nine$ }
		$param_nine$ = { save_global_event_target_as = se_hidden_string_param }
	}
	else_if = {
		limit = { is_scope_set = event_target:$param_nine$ }
		event_target:$param_nine$ = { save_global_event_target_as = se_hidden_string_param }
	}
	else = {
		log_error = "se_return_string: Invalid scope reference passed by argument: param_nine"
		break = yes
	}
	event_target:se_hidden_string_param = {
		if = {
			limit = { NOT = { se_scope_can_be_named = yes } }
			log_error = "se_return_string: Scope param_nine cannot be renamed as it does not support an implementation of the set_name effect."
			break = yes
		}
		prev.owner = {
			se_create_database_entry = {
				identifier = se_temp_param_nine
				overwrite = yes
			}
		}
		event_target:se_return_value = {
			set_name = \\[Prev.GetName]
			se_add_entry_to_list = { identifier = se_param_list }
		}
	}
	clear_global_event_target = se_hidden_string_param
	se_clear_return_value = yes
	]
	[[param_ten]
	if = {
		limit = { is_scope_set = $param_ten$ }
		$param_ten$ = { save_global_event_target_as = se_hidden_string_param }
	}
	else_if = {
		limit = { is_scope_set = event_target:$param_ten$ }
		event_target:$param_ten$ = { save_global_event_target_as = se_hidden_string_param }
	}
	else = {
		log_error = "se_return_string: Invalid scope reference passed by argument: param_ten"
		break = yes
	}
	event_target:se_hidden_string_param = {
		if = {
			limit = { NOT = { se_scope_can_be_named = yes } }
			log_error = "se_return_string: Scope param_ten cannot be renamed as it does not support an implementation of the set_name effect."
			break = yes
		}
		prev.owner = {
			se_create_database_entry = {
				identifier = se_temp_param_ten
				overwrite = yes
			}
		}
		event_target:se_return_value = {
			set_name = \\[Prev.GetName]
			se_add_entry_to_list = { identifier = se_param_list }
		}
	}
	clear_global_event_target = se_hidden_string_param
	se_clear_return_value = yes
	]
	[[param_list]
	}
	]
	[[bound_to]
	if = {
		limit = { is_scope_set = $bound_to$ }
		$bound_to$ = { save_global_event_target_as = se_hidden_string_owner_scope }
	}
	else_if = {
		limit = { is_scope_set = event_target:$bound_to$ }
		event_target:$bound_to$ = { save_global_event_target_as = se_hidden_string_owner_scope }
	}
	else = {
		log_error = "se_return_string: Invalid scope reference passed by argument: bound_to."
		break = yes
	}
	event_target:se_hidden_string_owner_scope = {
	]
	se_clear_return_value = yes
	se_get_database = { bound_to = this }
	if = {
		limit = { NOT = { exists = event_target:se_return_value } }
		log_error = "se_return_string: Scope this is not a database and does not have an obviously accessable database."
		break = yes
	}
	event_target:se_return_value = { save_global_event_target_as = se_hidden_scoped_string_database }
	event_target:se_hidden_scoped_string_database = {
		se_clear_return_value = yes
		se_get_enumerator = { identifier = $identifier$ }
		event_target:se_return_value = {
			se_reset_enumerator = yes
			save_global_event_target_as = se_hidden_current_enumerator
		}
		event_target:se_hidden_current_enumerator = {
			se_enumerator_return_current = yes
			while = {
				limit = { exists = event_target:se_return_value }
				event_target:se_return_value = { save_global_event_target_as = se_substring }
				se_clear_return_value = yes
				event_target:se_substring = {
					if = {
						limit = { has_leader_flag = se_string_parameter }
						se_get_list_entry = {
							identifier = $param_list|se_param_list$
							index = se_param_index
						}
						set_name = "\\[se_return_value.GetName]"
					}
					if = {
						limit = { NOT = { has_leader_flag = se_name_return_value } }
						event_target:se_hidden_return_scope = { set_name = "\\[This.GetName]\\[se_return_value.GetName]" }
					}
					[[destroy_string]
					if = {
						limit = { always = $destroy_string$ }
						se_remove_entry_from_list = { identifier = $identifier$ }
					}
					]
				}
				se_enumerator_move_next = yes
			}
		}
	}
	clear_global_event_target = se_hidden_scoped_string_database
	clear_global_event_target = se_hidden_return_scope
	[[bound_to]
	}
	clear_global_event_target = se_hidden_string_owner_scope
	]
}

### Appends a number of spaces to the string
### Parameters
# identifier			- A unique identifier for the given string
# count(optional)		- The number of spaces to append to the given string value, default to 1
# bound_to(optional) 	- The scope that the associated string is stored to
# index(optional)		- The index in the string to append these spaces, default value is current count - 1
se_append_space = {
	set_variable = {
		which = se_space_count
		value = $count|1$
	}
	[[index]
	set_variable = {
		which = se_append_index
		value = $index$
	}
	]
	[[bound_to]
	if = {
		limit = { is_scope_set = $bound_to$ }
		$bound_to$ = { save_global_event_target_as = se_hidden_string_owner_scope }
	}
	else_if = {
		limit = { is_scope_set = event_target:$bound_to$ }
		event_target:$bound_to$ = { save_global_event_target_as = se_hidden_string_owner_scope }
	}
	else = {
		log_error = "se_new_string: Invalid scope reference passed by argument: bound_to."
		break = yes
	}
	event_target:se_hidden_string_owner_scope = {
	]
	se_clear_return_value = yes
	se_get_database = { bound_to = this }
	if = {
		limit = { exists = event_target:se_return_value }
		event_target:se_return_value = { save_global_event_target_as = se_hidden_scoped_string_database }
	}
	else = { event_target:se_global_database = { save_global_event_target_as = se_hidden_scoped_string_database } }
	event_target:se_hidden_scoped_string_database = {
		prev[[bound_to].prev] = {
			if = {
				limit = { is_variable_set = se_append_index }
				prev = {
					set_variable = {
						which = se_temp_append_index
						value = {
							scope = prev
							variable = se_append_index
						}
					}
				}
			}
		}
		[[index]
		]
		se_get_list_header = { identifier = $identifier$ }
		if = {
			limit = { exists = event_target:se_return_value }
			event_target:se_return_value = {
				if = {
					limit = { has_leader_flag = se_comparable_string }
					set_variable = {
						which = se_temp_append_index
						value = prev
					}
					while = {
						limit = {
							check_variable = {
								which = se_temp_append_index
								value != 0
							}
						}
						se_append_char = {
							identifier = $identifier$
							char = space
						}
						subtract_variable = {
							which = se_temp_append_index
							value = 1
						}
					}
					break = yes
				}
			}
		}
		else = {
			log_error = "se_append_to_string: Header for string not found in the current database."
			break = yes
		}
		se_clear_return_value = yes
		se_create_list_entry = {
			identifier = $identifier$
			[[index]index = se_temp_append_index]
		}
		set_variable = {
			which = se_space_count
			value = prev[[bound_to].prev]
		}
		if = {
			limit = {
				check_variable = {
					which = se_space_count
					value > 2
				}
			}
			set_variable = {
				which = se_tri_space_count
				value = se_space_count
			}
			divide_variable = {
				which = se_tri_space_count
				value = 3
			}
			floor_variable = se_tri_space_count
			modulo_variable = {
				which = se_space_count
				value = 3
			}
		}
		if = {
			limit = {
				check_variable = {
					which = se_space_count
					value > 1
				}
			}
			set_variable = {
				which = se_pair_space_count
				value = se_space_count
			}
			divide_variable = {
				which = se_pair_space_count
				value = 2
			}
			floor_variable = se_pair_space_count
			modulo_variable = {
				which = se_space_count
				value = 2
			}
		}
		event_target:se_return_value = {
			if = {
				limit = { is_variable_set = se_tri_space_count }
				while = {
					count < se_tri_space_count
					set_name = "\\[This.GetName]   "
				}
			}
			if = {
				limit = { is_variable_set = se_pair_space_count }
				while = {
					count < se_pair_space_count
					set_name = "\\[This.GetName]  "
				}
			}
			while = {
				count < se_space_count
				set_name = "\\[This.GetName] "
			}
		}
		se_clear_return_value = yes
		# Do some modulus and divison to chunk into 3s, 2s and singular space groups
		[[index]clear_variable = se_temp_append_index]
	}
	clear_global_event_target = se_hidden_scoped_string_database
	[[bound_to]
	}
	clear_global_event_target = se_hidden_string_owner_scope
	]
	[[index]clear_variable = se_append_index]
	clear_variable = se_space_count
}

 #####						#####
##### Uncomparable strings #####
 #####						#####
 # Non-Comparable strings are easier to build strings and are recommended for creating dynamically named objects
 # These strings are also able to accept other objects as parameters for building a final string value.
 # It is recommended to use these strings when you only need to create a new string and destroy it upon build.

### Creates a new non-comparable string object and links it to the given scope
### Parameters
# identifier 				- A unique identifier for the given string
# text(optional) 			- Creates the string with this text at the base, text must be non spaced
# bind_to_scope(optional) 	- Binds the string to the set object, default value is this
# overwrite(optional) 		- Determines whether or not to delete any existing string with the same identifier, default value is no
se_new_string = {
	[[bind_to_scope]
	if = {
		limit = { is_scope_set = $bind_to_scope$ }
		$bind_to_scope$ = { save_global_event_target_as = se_hidden_string_owner_scope }
	}
	else_if = {
		limit = { is_scope_set = event_target:$bind_to_scope$ }
		event_target:$bind_to_scope$ = { save_global_event_target_as = se_hidden_string_owner_scope }
	}
	else = {
		log_error = "se_new_string: Invalid scope reference passed by argument: bind_to_scope."
		break = yes
	}
	event_target:se_hidden_string_owner_scope = {
	]
	if = {
		limit = { se_scope_can_be_named = yes }
		se_clear_return_value = yes
		se_get_or_create_database = { bound_to = this }
		event_target:se_return_value = { save_global_event_target_as = se_hidden_scoped_string_database }
		se_clear_return_value = yes
		event_target:se_hidden_scoped_string_database = {
			se_create_list = {
				identifier = $identifier$
				overwrite = yes
			}
		}
		event_target:se_return_value = {
			set_leader_flag = se_string_of_@prev
			[[text]set_name = $text$]
		}
	}
	else = { log_error = "se_append_stringbuilder: Scope bind_to_scope cannot be renamed as it does not support an implementation of the set_name effect." }
	[[bind_to_scope]
	}
	clear_global_event_target = se_hidden_string_owner_scope
	]
}

### Appends a string of non space values to an existing string
### Parameters
# identifier 			- A unique identifier for the given string
# text 					- Creates the string with this text at the base, text must be non spaced
# bound_to(optional) 	- The scope that the associated string is stored to
# index(optional) 		- The index in the string to append this text, default value is current count - 1
se_append_text = {
	[[index]
	set_variable = {
		which = se_append_index
		value = $index$
	}
	]
	[[bound_to]
	if = {
		limit = { is_scope_set = $bound_to$ }
		$bound_to$ = { save_global_event_target_as = se_hidden_string_owner_scope }
	}
	else_if = {
		limit = { is_scope_set = event_target:$bound_to$ }
		event_target:$bound_to$ = { save_global_event_target_as = se_hidden_string_owner_scope }
	}
	else = {
		log_error = "se_append_text: Invalid scope reference passed by argument: bound_to."
		break = yes
	}
	event_target:se_hidden_string_owner_scope = {
	]
	se_clear_return_value = yes
	se_get_database = { bound_to = this }
	if = {
		limit = { NOT = { exists = event_target:se_return_value } }
		log_error = "se_append_text: Scope this is not a database and does not have an obviously accessable database."
		break = yes
	}
	event_target:se_return_value = { save_global_event_target_as = se_hidden_scoped_string_database }
	se_clear_return_value = yes
	event_target:se_hidden_scoped_string_database = {
		prev[[bound_to].prev] = {
			if = {
				limit = { is_variable_set = se_append_index }
				prev = {
					set_variable = {
						which = se_temp_append_index
						value = {
							scope = prev
							variable = se_append_index
						}
					}
				}
			}
		}
		se_get_list_header = { identifier = $identifier$ }
		if = {
			limit = { exists = event_target:se_return_value }
			event_target:se_return_value = {
				if = {
					limit = { has_leader_flag = se_comparable_string }
					log_error = "se_append_text: Attempting to add text to a comparable string, use se_append_char for this string"
					break = yes
				}
			}
		}
		else = {
			log_error = "se_append_text: Header for string not found in the current database."
			break = yes
		}
		se_clear_return_value = yes
		se_create_list_entry = {
			identifier = $identifier$
			[[index]index = se_temp_append_index]
		}
		event_target:se_return_value = { set_name = $text$ }
		[[index]clear_variable = se_temp_append_index]
	}
	clear_global_event_target = se_hidden_scoped_string_database
	[[bound_to]
	}
	clear_global_event_target = se_hidden_string_owner_scope
	]
	[[index]clear_variable = se_append_index]
	se_clear_return_value = yes
}

### Appends a parameter to be filled in at string return
### Parameters
# identifier 			- A unique identifier for the given string
# param_index 			- The index of the parameter, used when calling the same parameter multiple times
# bound_to(optional) 	- The scope that the associated string is stored to
# index(optional) 		- The index in the string to append this text, default value is current count - 1
se_append_parameter = {
	[[index]
	set_variable = {
		which = se_append_index
		value = $index$
	}
	]
	set_variable = {
		which = se_param_index
		value = $param_index$
	}
	[[bound_to]
	if = {
		limit = { is_scope_set = $bound_to$ }
		$bound_to$ = { save_global_event_target_as = se_hidden_string_owner_scope }
	}
	else_if = {
		limit = { is_scope_set = event_target:$bound_to$ }
		event_target:$bound_to$ = { save_global_event_target_as = se_hidden_string_owner_scope }
	}
	else = { log_error = "se_new_string: Invalid scope reference passed by argument: bound_to." }
	event_target:se_hidden_string_owner_scope = {
	]
	se_clear_return_value = yes
	se_get_database = { bound_to = this }
	if = {
		limit = { exists = event_target:se_return_value }
		event_target:se_return_value = { save_global_event_target_as = se_hidden_scoped_string_database }
	}
	else = { event_target:se_global_database = { save_global_event_target_as = se_hidden_scoped_string_database } }
	event_target:se_hidden_scoped_string_database = {
		if = {
			limit = { prev[[bound_to].prev] = { is_variable_set = se_append_index } }
			set_variable = {
				which = se_temp_append_index
				value = {
					scope = prev[[bound_to].prev]
					variable = se_append_index
				}
			}
		}
		se_create_list_entry = {
			identifier = $identifier$
			[[index]index = se_temp_append_index]
		}
		event_target:se_return_value = {
			se_set_database_entry_flag = { flag = se_string_parameter }
			set_variable = {
				which = se_param_index
				value = prev.prev[[bound_to].prev]
			}
		}
		se_clear_return_value = yes
		[[index]clear_variable = se_temp_append_index]
	}
	clear_global_event_target = se_hidden_scoped_string_database
	[[bound_to]
	}
	clear_global_event_target = se_hidden_string_owner_scope
	]
	clear_variable = se_param_index
	[[index]clear_variable = se_append_index]
}

 #####				   #####
##### Comparable String #####
 #####				   #####
 # Comparable strings are similar to default strings but lack certain features to allow for string and character based equality
 # Comparable strings CANNOT have parameters due to their dynamic values
 # These strings are used for user input and for comparing string values in the niche cases you need them

### Creates a new string which is capable of being compared to another string
### Parameters
# identifier 				- A database unique identifier for the given string
# char(optional)			- The root character in the string, NOTE that a char is a single ascii character, such as a, 1, or !
# bind_to_scope(optional) 	- Binds the string to the set object, default value is this
# overwrite(optional) 		- Determines whether or not to delete any existing string with the same identifier, default value is no
se_new_comparable_string = {
	[[bind_to_scope]
	if = {
		limit = { is_scope_set = $bind_to_scope$ }
		$bind_to_scope$ = { save_global_event_target_as = se_hidden_string_owner_scope }
	}
	else_if = {
		limit = { is_scope_set = event_target:$bind_to_scope$ }
		event_target:$bind_to_scope$ = { save_global_event_target_as = se_hidden_string_owner_scope }
	}
	else = { log_error = "se_new_comparable_string: Invalid scope reference passed by argument: bind_to_scope." }
	event_target:se_hidden_string_owner_scope = {
	]
	if = {
		limit = { se_scope_can_be_named = yes }
		se_ensure_string_dictionary_exists = yes
		se_clear_return_value = yes
		se_get_database = { bound_to = this }
		if = {
			limit = { exists = event_target:se_return_value }
			event_target:se_return_value = { save_global_event_target_as = se_hidden_scoped_string_database }
		}
		else = {
			se_create_database = { bind_to_scope = this }
			event_target:se_return_value = { save_global_event_target_as = se_hidden_scoped_string_database }
		}
		se_clear_return_value = yes
		event_target:se_hidden_scoped_string_database = {
			se_create_list = {
				identifier = $identifier$
				overwrite = $overwrite|no$
			}
		}
		clear_global_event_target = se_hidden_scoped_string_database
		event_target:se_return_value = {
			se_set_database_entry_flag = { flag = se_string_of_@prev }
			se_set_database_entry_flag = { flag = se_comparable_string }
			[[char]set_name = $char$]
		}
	}
	else = { log_error = "se_new_comparable_string: Scope bind_to_scope cannot be renamed as it does not support an implementation of the set_name effect." }
	[[bind_to_scope]
	}
	clear_global_event_target = se_hidden_string_owner_scope
	]
}

### Appends a new character in a method that it can be compared vs other strings
### Parameters
# identifier 			- A unique identifier for the given string
# char					- The character to add to the string, NOTE that a char is a single ascii character, such as a, 1, or !
# bound_to(optional) 	- The scope that the associated string is stored to
# index(optional) 		- The index in the string to append this text, default value is current count - 1
se_append_char = {
	[[index]
	set_variable = {
		which = se_append_index
		value = $index$
	}
	]
	se_ensure_string_dictionary_exists = yes
	event_target:se_char_dictionary = {
		se_get_database_entry = { identifier = se_char_$char$ }
		if = {
			limit = { exists = event_target:se_return_value }
			event_target:se_return_value = { save_global_event_target_as = se_hidden_char_value }
		}
		else = {
			log_error = "se_append_char: Invalid char passed to string value."
			break = yes
		}
	}
	[[bound_to]
	if = {
		limit = { is_scope_set = $bound_to$ }
		$bound_to$ = { save_global_event_target_as = se_hidden_string_owner_scope }
	}
	else_if = {
		limit = { is_scope_set = event_target:$bound_to$ }
		event_target:$bound_to$ = { save_global_event_target_as = se_hidden_string_owner_scope }
	}
	else = {
		log_error = "se_append_char: Invalid scope reference passed by argument: bound_to."
		break = yes
	}
	event_target:se_hidden_string_owner_scope = {
	]
	se_get_database = { bound_to = this }
	if = {
		limit = { NOT = { exists = event_target:se_return_value } }
		log_error = "se_append_char: Scope this is not a database and does not have an obviously accessable database."
		break = yes
	}
	event_target:se_return_value = { save_global_event_target_as = se_hidden_scoped_string_database }
	event_target:se_hidden_scoped_string_database = {
		prev[[bound_to].prev] = {
			if = {
				limit = { is_variable_set = se_append_index }
				prev = {
					set_variable = {
						which = se_temp_append_index
						value = {
							scope = prev
							variable = se_append_index
						}
					}
				}
			}
		}
		se_create_list_entry = {
			identifier = $identifier$
			[[index]index = se_temp_append_index]
		}
		event_target:se_hidden_char_value = {
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = prev
				}
				set_name = \\[Prev.GetName]
			}
		}
		[[index]clear_variable = se_temp_append_index]
	}
	[[bound_to]
	}
	clear_global_event_target = se_hidden_string_owner_scope
	]
	clear_global_event_target = se_hidden_char_value
	[[index]clear_variable = se_append_index]
	se_clear_return_value = yes
}

### Removes a character from the comparable string
### Parameters
# identifier			- A unique identifier for the given string
# index					- The index of which character to remove
# bound_to(optional)	- The scope that the associated string is stored to
se_remove_char = {
	set_variable = {
		which = se_hidden_remove_index
		value = $index$
	}
	[[bound_to]
	if = {
		limit = { is_scope_set = $bound_to$ }
		$bound_to$ = { save_global_event_target_as = se_hidden_string_owner_scope }
	}
	else_if = {
		limit = { is_scope_set = event_target:$bound_to$ }
		event_target:$bound_to$ = { save_global_event_target_as = se_hidden_string_owner_scope }
	}
	else = {
		log_error = "se_remove_char: Invalid scope reference passed by argument: bound_to."
		break = yes
	}
	event_target:se_hidden_string_owner_scope = {
	]
	se_get_database = { bound_to = this }
	if = {
		limit = { NOT = { exists = event_target:se_return_value } }
		log_error = "se_remove_char: Scope this is not a database and does not have an obviously accessable database."
		break = yes
	}
	event_target:se_return_value = { save_global_event_target_as = se_hidden_scoped_string_database }
	event_target:se_hidden_scoped_string_database = {
		set_variable = {
			which = se_hidden_remove_index
			value = prev[[bound_to].prev]
		}
		se_remove_list_entry = {
			identifier = $identifier$
			index = se_hidden_remove_index
			delete = yes
		}
		clear_variable = se_hidden_remove_index
	}
	clear_global_event_target = se_hidden_scoped_string_database
	[[bound_to]
	}
	clear_global_event_target = se_hidden_string_owner_scope
	]
	clear_variable = se_hidden_remove_index
}

### Internal use, do not use outside of code within this mod
se_ensure_string_dictionary_exists = {
	if = {
		limit = { NOT = { exists = event_target:se_char_dictionary } }
		se_get_database = { identifier = se_internal_string_dictionary }
		if = {
			limit = { NOT = { exists = event_target:se_return_value } }
			se_create_database = { identifier = se_internal_string_dictionary }
		}
		event_target:se_return_value = { save_global_event_target_as = se_hidden_scoped_string_database }
		se_clear_return_value = yes
		event_target:se_hidden_scoped_string_database = {
			# Lowercase Letters
			se_create_database_entry = { identifier = se_char_a }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 0
				}
				set_name = "a"
			}
			se_create_database_entry = { identifier = se_char_b }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 1
				}
				set_name = "b"
			}
			se_create_database_entry = { identifier = se_char_c }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 2
				}
				set_name = "c"
			}
			se_create_database_entry = { identifier = se_char_d }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 3
				}
				set_name = "d"
			}
			se_create_database_entry = { identifier = se_char_e }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 4
				}
				set_name = "e"
			}
			se_create_database_entry = { identifier = se_char_f }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 5
				}
				set_name = "f"
			}
			se_create_database_entry = { identifier = se_char_g }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 6
				}
				set_name = "g"
			}
			se_create_database_entry = { identifier = se_char_h }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 7
				}
				set_name = "h"
			}
			se_create_database_entry = { identifier = se_char_i }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 8
				}
				set_name = "i"
			}
			se_create_database_entry = { identifier = se_char_j }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 9
				}
				set_name = "j"
			}
			se_create_database_entry = { identifier = se_char_k }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 10
				}
				set_name = "k"
			}
			se_create_database_entry = { identifier = se_char_l }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 11
				}
				set_name = "l"
			}
			se_create_database_entry = { identifier = se_char_m }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 12
				}
				set_name = "m"
			}
			se_create_database_entry = { identifier = se_char_n }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 13
				}
				set_name = "n"
			}
			se_create_database_entry = { identifier = se_char_o }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 14
				}
				set_name = "o"
			}
			se_create_database_entry = { identifier = se_char_p }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 15
				}
				set_name = "p"
			}
			se_create_database_entry = { identifier = se_char_q }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 16
				}
				set_name = "q"
			}
			se_create_database_entry = { identifier = se_char_r }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 17
				}
				set_name = "r"
			}
			se_create_database_entry = { identifier = se_char_s }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 18
				}
				set_name = "s"
			}
			se_create_database_entry = { identifier = se_char_t }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 19
				}
				set_name = "t"
			}
			se_create_database_entry = { identifier = se_char_u }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 20
				}
				set_name = "u"
			}
			se_create_database_entry = { identifier = se_char_v }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 21
				}
				set_name = "v"
			}
			se_create_database_entry = { identifier = se_char_w }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 22
				}
				set_name = "w"
			}
			se_create_database_entry = { identifier = se_char_x }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 23
				}
				set_name = "x"
			}
			se_create_database_entry = { identifier = se_char_y }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 24
				}
				set_name = "y"
			}
			se_create_database_entry = { identifier = se_char_z }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 25
				}
				set_name = "z"
			}
			# Capital Letters
			se_create_database_entry = { identifier = se_char_ca }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 26
				}
				set_name = "A"
			}
			se_create_database_entry = { identifier = se_char_cb }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 27
				}
				set_name = "B"
			}
			se_create_database_entry = { identifier = se_char_cc }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 28
				}
				set_name = "C"
			}
			se_create_database_entry = { identifier = se_char_cd }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 29
				}
				set_name = "D"
			}
			se_create_database_entry = { identifier = se_char_ce }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 30
				}
				set_name = "E"
			}
			se_create_database_entry = { identifier = se_char_cf }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 31
				}
				set_name = "F"
			}
			se_create_database_entry = { identifier = se_char_cg }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 32
				}
				set_name = "G"
			}
			se_create_database_entry = { identifier = se_char_ch }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 33
				}
				set_name = "H"
			}
			se_create_database_entry = { identifier = se_char_ci }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 34
				}
				set_name = "I"
			}
			se_create_database_entry = { identifier = se_char_cj }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 35
				}
				set_name = "J"
			}
			se_create_database_entry = { identifier = se_char_ck }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 36
				}
				set_name = "K"
			}
			se_create_database_entry = { identifier = se_char_cl }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 37
				}
				set_name = "L"
			}
			se_create_database_entry = { identifier = se_char_cm }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 38
				}
				set_name = "M"
			}
			se_create_database_entry = { identifier = se_char_cn }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 39
				}
				set_name = "N"
			}
			se_create_database_entry = { identifier = se_char_co }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 40
				}
				set_name = "O"
			}
			se_create_database_entry = { identifier = se_char_cp }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 41
				}
				set_name = "P"
			}
			se_create_database_entry = { identifier = se_char_cq }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 42
				}
				set_name = "Q"
			}
			se_create_database_entry = { identifier = se_char_cr }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 43
				}
				set_name = "R"
			}
			se_create_database_entry = { identifier = se_char_cs }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 44
				}
				set_name = "S"
			}
			se_create_database_entry = { identifier = se_char_ct }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 45
				}
				set_name = "T"
			}
			se_create_database_entry = { identifier = se_char_cu }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 46
				}
				set_name = "U"
			}
			se_create_database_entry = { identifier = se_char_cv }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 47
				}
				set_name = "V"
			}
			se_create_database_entry = { identifier = se_char_cw }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 48
				}
				set_name = "W"
			}
			se_create_database_entry = { identifier = se_char_cx }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 49
				}
				set_name = "X"
			}
			se_create_database_entry = { identifier = se_char_cy }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 50
				}
				set_name = "Y"
			}
			se_create_database_entry = { identifier = se_char_cz }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 51
				}
				set_name = "Z"
			}
			# Number Chars
			se_create_database_entry = { identifier = se_char_0 }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 52
				}
				set_name = "0"
			}
			se_create_database_entry = { identifier = se_char_1 }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 53
				}
				set_name = "1"
			}
			se_create_database_entry = { identifier = se_char_2 }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 54
				}
				set_name = "2"
			}
			se_create_database_entry = { identifier = se_char_3 }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 55
				}
				set_name = "3"
			}
			se_create_database_entry = { identifier = se_char_4 }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 56
				}
				set_name = "4"
			}
			se_create_database_entry = { identifier = se_char_5 }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 57
				}
				set_name = "5"
			}
			se_create_database_entry = { identifier = se_char_6 }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 58
				}
				set_name = "6"
			}
			se_create_database_entry = { identifier = se_char_7 }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 59
				}
				set_name = "7"
			}
			se_create_database_entry = { identifier = se_char_8 }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 60
				}
				set_name = "8"
			}
			se_create_database_entry = { identifier = se_char_9 }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 61
				}
				set_name = "9"
			}
			# Special Chars
			se_create_database_entry = { identifier = se_char_space }
			event_target:se_return_value = {
				set_variable = {
					which = se_character_value
					value = 61
				}
				set_name = " "
			}
			save_global_event_target_as = se_char_dictionary
		}
		clear_global_event_target = se_hidden_scoped_string_database
	}
}

### Compares two strings for equality
### Parameters
# identifier					- A database unique identifier for the first string
# bound_to(optional)			- The scope that the primary string is stored to
# compare_identifier			- A database unique identifier for the comparing string
# compare_database(optional)	- The database containing the comparing string
# compare_owner(optional)		- The owner scope of the comparing string(Will not execute if compare_database is passed)
se_compare_string = {
	se_internal_reset_comparison = yes
	[[compare_database]
	if = {
		limit = { is_scope_set = $compare_database$ }
		$compare_database$ = { save_global_event_target_as = se_hidden_compare_database }
	}
	else_if = {
		limit = { is_scope_set = event_target:$compare_database$ }
		event_target:$compare_database$ = { save_global_event_target_as = se_hidden_compare_database }
	}
	else = {
		log_error = "se_compare_string: The provided scope is not a database entry: compare_database"
		break = yes
	}
	]
	[[compare_owner]
	if = {
		limit = { NOT = { exists = event_target:se_hidden_compare_database } }
		if = {
			limit = { is_scope_set = $compare_owner$ }
			$compare_database$ = { save_global_event_target_as = se_hidden_compare_owner }
		}
		else_if = {
			limit = { is_scope_set = event_target:$compare_owner$ }
			event_target:$compare_database$ = { save_global_event_target_as = se_hidden_compare_owner }
		}
		else = {
			log_error = "se_compare_string: The provided scope is not a database entry: compare_database"
			break = yes
		}
		event_target:se_hidden_compare_owner = {
			se_clear_return_value = yes
			se_get_database = { bound_to = this }
		}
		if = {
			limit = { NOT = { exists = event_target:se_return_value } }
			clear_global_event_target = se_hidden_compare_owner
			log_error = "se_compare_string: Invalid scope reference passed by argument: compare_owner"
			break = yes
		}
		event_target:se_return_value = { save_global_event_target_as = se_hidden_compare_database }
		clear_global_event_target = se_hidden_compare_owner
	}
	]
	[[bound_to]
	if = {
		limit = { is_scope_set = $bound_to$ }
		$bound_to$ = { save_global_event_target_as = se_hidden_string_owner_scope }
	}
	else_if = {
		limit = { is_scope_set = event_target:$bound_to$ }
		event_target:$bound_to$ = { save_global_event_target_as = se_hidden_string_owner_scope }
	}
	else = {
		log_error = "se_compare_string: Invalid scope reference passed by argument: bound_to."
		break = yes
	}
	event_target:se_hidden_string_owner_scope = {
	]
	se_clear_return_value = yes
	se_get_database = { bound_to = this }
	if = {
		limit = { NOT = { exists = event_target:se_return_value } }
		log_error = "se_compare_string: Scope this is not a database and does not have an obviously accessable database."
		break = yes
	}
	event_target:se_return_value = {
		save_global_event_target_as = se_hidden_scoped_string_database
		if = {
			limit = { NOT = { exists = event_target:se_hidden_compare_database } }
			save_global_event_target_as = se_hidden_compare_database
		}
	}
	event_target:se_hidden_scoped_string_database = {
		se_clear_return_value = yes
		se_get_enumerator = { identifier = $identifier$ }]
		if = {
			limit = { NOT = { exists = event_target:se_return_value } }
			log_error = "se_compare_string: Scope this is not a database and does not have an obviously accessable database."
			break = yes
		}
		event_target:se_return_value = { save_global_event_target_as = se_hidden_scoped_string_database_enumerator }
		se_clear_return_value = yes
		event_target:se_hidden_scoped_string_database_enumerator = {
			se_enumerator_return_current = yes
			event_target:se_return_value = { save_global_event_target_as = se_hidden_char_value }
			se_clear_return_value = yes
			se_internal_set_comparison_true = yes
			while = {
				limit = { exists = event_target:se_hidden_char_value }
				event_target:se_hidden_char_value = {
					if = {
						limit = { is_variable_set = se_character_value }
						event_target:se_hidden_compare_database = {
							se_get_list_entry = {
								identifier = $compare_identifier$
								index = se_hidden_index
							}
							event_target:se_return_value = {
								if = {
									limit = { is_variable_set = se_character_value }
									set_variable = {
										which = se_hidden_char_comparison
										value = {
											scope = event_target:se_hidden_char_value
											variable = se_list_index
										}
									}
									if = {
										limit = {
											check_variable = {
												which = se_list_index
												value != se_hidden_char_comparison
											}
										}
										clear_variable = se_hidden_char_comparison
										se_internal_set_comparison_false = yes
										break = yes
									}
									clear_variable = se_hidden_char_comparison
								}
								else = {
									se_internal_set_comparison_false = yes
									log_error = "se_compare_string: The string character is not a valid comparable token and cannot be compared."
									break = yes
								}
							}
						}
					}
					else = {
						log_error = "se_compare_string: The string character is not a valid comparable token and cannot be compared."
						break = yes
					}
				}
			}
			se_clear_return_value = yes
			if = {
				limit = { exists = event_target:se_hidden_char_value }
				clear_global_event_target = se_hidden_char_value
			}
		}
	}
	clear_global_event_target = se_hidden_scoped_string_database
	clear_global_event_target = se_hidden_compare_database
	[[bound_to]
	}
	clear_global_event_target = se_hidden_string_owner_scope
	]
}